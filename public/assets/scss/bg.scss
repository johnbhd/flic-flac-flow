@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
$fonts: 'Roboto', sans-serif; 


@mixin sp-layout {
    @media screen and (max-width: 750px) {
      @content;
    }
  }
  
  body {
    background: radial-gradient(ellipse at bottom, #0d1d31 0%, #0c0d13 100%);
    overflow: hidden;

    .choices {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      justify-content: center;
    }
    footer {
      color: white;
      letter-spacing: 0.5px;

      a {
        font-weight: 700;
        font-family: $fonts;
        cursor: pointer;
        text-decoration: none;
        color: inherit;
      }
      a:hover {
        color: #f39c12;
      }
    }
    h2 {
      position: relative;
      bottom: 12vh;
      font-size: 10vh;
      font-weight: 700;
      letter-spacing: 2px;
      background: linear-gradient(45deg, #1e90ff, #00ced1);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      transition: transform 0.3s ease, text-shadow 0.3s ease;
    }
    
    h2:hover {
      transform: scale(1.1);
    }
    
    @media screen and (max-width: 768px) {
      h2 {
        font-size: 7vh;
        letter-spacing: 1px;
      }
    }    
}

  
  @function random_range($min, $max) {
    $rand: random();
    $random_range: $min + floor($rand * (($max - $min) + 1));
    @return $random_range;
  }
  
  .stars {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: rotate(-45deg);
  }
  
  .star {
    $star-count: 20;
    --star-color: #c4b5b5; 
    --star-tail-length: 4em;
    --star-tail-height: 2px;
    --star-width: calc(var(--star-tail-length) / 6);
    --fall-duration: 9s;
    --tail-fade-duration: var(--fall-duration);
  
    position: absolute;
    top: var(--top-offset);
    left: 0;
    width: var(--star-tail-length);
    height: var(--star-tail-height);
    color: var(--star-color);
    background: linear-gradient(45deg, currentColor, transparent);
    border-radius: 50%;
    filter: drop-shadow(0 0 6px currentColor);
    transform: translate3d(104em, 0, 0);
    animation: fall var(--fall-duration) var(--fall-delay) linear infinite, tail-fade var(--tail-fade-duration) var(--fall-delay) ease-out infinite;
    
    @include sp-layout {
      // For mobile performance, tail-fade animation will be removed QAQ
      animation: fall var(--fall-duration) var(--fall-delay) linear infinite;
    }
  
    @for $i from 1 through $star-count {
      &:nth-child(#{$i}) {
        --star-tail-length: #{random_range(500em, 750em) / 100};
        --top-offset: #{random_range(0vh, 10000vh) / 100};
        --fall-duration: #{random_range(6000, 12000s) / 1000};
        --fall-delay: #{random_range(0, 10000s) / 1000};
      }
    }
  
    &::before, &::after {
      position: absolute;
      content: '';
      top: 0;
      left: calc(var(--star-width) / -2);
      width: var(--star-width);
      height: 100%;
      background: linear-gradient(45deg, transparent, currentColor, transparent);
      border-radius: inherit;
      animation: blink 1s linear infinite;
    }
  
    &::before {
      transform: rotate(45deg);
    }
  
    &::after {
      transform: rotate(-45deg);
    }
  }
  
  @keyframes fall {
    to {
      transform: translate3d(-30em, 0, 0);
    }
  }
  
  @keyframes tail-fade {
    0%, 50% {
      width: var(--star-tail-length);
      opacity: 1;
    }
  
    70%, 80% {
      width: 0;
      opacity: 0.4;
    }
  
    100% {
      width: 0;
      opacity: 0;
    }
  }
  
  @keyframes blink {
    50% {
      opacity: 0.6;
    }
  }